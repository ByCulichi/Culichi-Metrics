#!/usr/bin/env python3
"""
Script de instalaci√≥n y verificaci√≥n para el Sistema de Reportes de M√©tricas
============================================================================

Este script automatiza la instalaci√≥n de dependencias y verifica que
el sistema est√© configurado correctamente para generar reportes.

Uso:
    python setup.py
"""

import subprocess
import sys
import os

def print_banner():
    """Imprime el banner de bienvenida."""
    print("=" * 70)
    print("üöÄ CONFIGURACI√ìN AUTOM√ÅTICA - SISTEMA DE REPORTES PANERA")
    print("   Instalaci√≥n y verificaci√≥n de dependencias")
    print("=" * 70)

def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible."""
    print("üêç Verificando versi√≥n de Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - Compatible")
    return True

def install_requirements():
    """Instala las dependencias del requirements.txt."""
    print("\nüì¶ Instalando dependencias...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error al instalar dependencias")
        return False

def verify_installation():
    """Verifica que las librer√≠as est√©n instaladas correctamente."""
    print("\nüîç Verificando instalaci√≥n...")
    
    required_packages = ['pandas', 'xlsxwriter', 'openpyxl']
    all_good = True
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - OK")
        except ImportError:
            print(f"‚ùå {package} - No disponible")
            all_good = False
    
    return all_good

def run_test():
    """Ejecuta una prueba del sistema."""
    print("\nüß™ Ejecutando prueba del sistema...")
    
    try:
        # Importa y ejecuta una prueba b√°sica
        result = subprocess.run([sys.executable, "to_excel.PY"], 
                               capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            print("‚úÖ Prueba exitosa - El sistema funciona correctamente")
            print("üìÅ Archivo de prueba generado: Reporte_Metricas_Christian_modified.xlsx")
            return True
        else:
            print("‚ùå Error en la prueba:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ La prueba tom√≥ demasiado tiempo - posiblemente exitosa")
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando prueba: {e}")
        return False

def main():
    """Funci√≥n principal del script de configuraci√≥n."""
    print_banner()
    
    # Verificar Python
    if not check_python_version():
        print("\nüí° Actualiza Python a la versi√≥n 3.8 o superior e intenta de nuevo")
        sys.exit(1)
    
    # Instalar dependencias
    if not install_requirements():
        print("\nüí° Revisa tu conexi√≥n a internet e intenta de nuevo")
        sys.exit(1)
    
    # Verificar instalaci√≥n
    if not verify_installation():
        print("\nüí° Intenta ejecutar: pip install -r requirements.txt")
        sys.exit(1)
    
    # Ejecutar prueba
    if not run_test():
        print("\nüí° Revisa los errores anteriores y contacta al administrador")
        sys.exit(1)
    
    # Mensaje final
    print("\n" + "=" * 70)
    print("üéâ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE")
    print("   El sistema est√° listo para generar reportes")
    print("\nüí° Para generar reportes, ejecuta:")
    print("   python to_excel.PY")
    print("=" * 70)

if __name__ == "__main__":
    main()